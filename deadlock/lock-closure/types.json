{
  "0": "i32",
  "1": "",
  "2": "u32",
  "3": "bool",
  "4": "u8",
  "6": "alloc::sync::ArcInner<std::sync::Mutex<i32>>",
  "7": "usize",
  "8": "&std::alloc::Global",
  "9": "std::alloc::Layout",
  "10": "*const u8",
  "12": "*mut usize",
  "16": "&std::sync::Mutex<bool>",
  "17": "*mut u32",
  "19": "&[&str]",
  "20": "*const [&str]",
  "21": "&std::sys::unix::locks::futex_mutex::Mutex",
  "22": "&std::sync::poison::Flag",
  "23": "*const usize",
  "24": "std::result::Result<std::sync::poison::Guard, std::sync::PoisonError<std::sync::poison::Guard>>",
  "25": "[closure@std::sync::MutexGuard<'_, bool>::new::{closure#0}]",
  "28": "&str",
  "36": "*mut u8",
  "39": "std::thread::Builder",
  "41": "std::string::String",
  "42": "&[u8]",
  "44": "std::vec::Vec<u8>",
  "45": "std::result::Result<std::ffi::CString, std::ffi::NulError>",
  "47": "std::option::Option<std::ffi::CString>",
  "48": "&std::sync::Arc<std::thread::Inner>",
  "49": "std::thread::Packet<'_, ()>",
  "51": "&'static mut std::thread::Packet<'_, ()>",
  "52": "std::panic::AssertUnwindSafe<[closure@<std::thread::Packet<'_, ()> as std::ops::Drop>::drop::{closure#0}]>",
  "53": "fn(*mut u8)",
  "56": "&mut std::sys::unix::stdio::Stderr",
  "58": "&std::io::Write::write_fmt::Adapter<'_, std::sys::unix::stdio::Stderr>",
  "59": "&std::thread::scoped::ScopeData",
  "61": "std::option::Option<std::sync::Arc<std::sync::Mutex<std::vec::Vec<u8>>>>",
  "63": "[closure@std::thread::Builder::spawn_unchecked_<'_, '_, [closure@src/main.rs:13:28: 13:35], ()>::{closure#1}]",
  "65": "&'static mut std::sync::Arc<std::thread::Packet<'_, ()>>",
  "66": "&mut std::sync::Arc<std::thread::Packet<'_, ()>>",
  "67": "*mut std::thread::Packet<'_, ()>",
  "68": "&'static mut std::sync::Weak<std::thread::Packet<'_, ()>, &std::alloc::Global>",
  "69": "&&std::alloc::Global",
  "71": "std::result::Result<std::thread::JoinHandle<()>, std::io::Error>",
  "74": "std::thread::JoinInner<'_, ()>",
  "75": "std::sys::unix::thread::Thread",
  "78": "&'static mut std::boxed::Box<dyn std::any::Any + std::marker::Send>"
}